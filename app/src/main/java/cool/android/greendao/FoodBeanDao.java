package cool.android.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cool.food.android.bean.FoodBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOOD_BEAN".
*/
public class FoodBeanDao extends AbstractDao<FoodBean, Long> {

    public static final String TABLENAME = "FOOD_BEAN";

    /**
     * Properties of entity FoodBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CreatTime = new Property(0, long.class, "creatTime", true, "_id");
        public final static Property RestaurantId = new Property(1, String.class, "restaurantId", false, "FoodBean");
        public final static Property FoodName = new Property(2, String.class, "foodName", false, "FOOD_NAME");
        public final static Property FoodPrice = new Property(3, String.class, "foodPrice", false, "FOOD_PRICE");
        public final static Property FoodAvatar = new Property(4, String.class, "foodAvatar", false, "FOOD_AVATAR");
        public final static Property BuyCount = new Property(5, int.class, "buyCount", false, "BUY_COUNT");
    }


    public FoodBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FoodBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOOD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: creatTime
                "\"FoodBean\" TEXT," + // 1: restaurantId
                "\"FOOD_NAME\" TEXT," + // 2: foodName
                "\"FOOD_PRICE\" TEXT," + // 3: foodPrice
                "\"FOOD_AVATAR\" TEXT," + // 4: foodAvatar
                "\"BUY_COUNT\" INTEGER NOT NULL );"); // 5: buyCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOOD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FoodBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCreatTime());
 
        String restaurantId = entity.getRestaurantId();
        if (restaurantId != null) {
            stmt.bindString(2, restaurantId);
        }
 
        String foodName = entity.getFoodName();
        if (foodName != null) {
            stmt.bindString(3, foodName);
        }
 
        String foodPrice = entity.getFoodPrice();
        if (foodPrice != null) {
            stmt.bindString(4, foodPrice);
        }
 
        String foodAvatar = entity.getFoodAvatar();
        if (foodAvatar != null) {
            stmt.bindString(5, foodAvatar);
        }
        stmt.bindLong(6, entity.getBuyCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FoodBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCreatTime());
 
        String restaurantId = entity.getRestaurantId();
        if (restaurantId != null) {
            stmt.bindString(2, restaurantId);
        }
 
        String foodName = entity.getFoodName();
        if (foodName != null) {
            stmt.bindString(3, foodName);
        }
 
        String foodPrice = entity.getFoodPrice();
        if (foodPrice != null) {
            stmt.bindString(4, foodPrice);
        }
 
        String foodAvatar = entity.getFoodAvatar();
        if (foodAvatar != null) {
            stmt.bindString(5, foodAvatar);
        }
        stmt.bindLong(6, entity.getBuyCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public FoodBean readEntity(Cursor cursor, int offset) {
        FoodBean entity = new FoodBean( //
            cursor.getLong(offset + 0), // creatTime
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // restaurantId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // foodName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // foodPrice
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // foodAvatar
            cursor.getInt(offset + 5) // buyCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FoodBean entity, int offset) {
        entity.setCreatTime(cursor.getLong(offset + 0));
        entity.setRestaurantId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFoodName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFoodPrice(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFoodAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBuyCount(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FoodBean entity, long rowId) {
        entity.setCreatTime(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FoodBean entity) {
        if(entity != null) {
            return entity.getCreatTime();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FoodBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
